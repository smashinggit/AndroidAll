// 复制文件
task("copyTask", type: Copy) {
    from "$buildDir/kotlin"
    into "$buildDir/kotlinCopy"

//    include('**/*.txt', '**/*.java', '**/*.properties')
//    exclude('**/*.xml')

//    def src = file("src/main/java")
//    from(src)
//
//    def dest = file("$buildDir/source")
//    into(dest)
}

tasks.create("copy", Copy) {
    File src = file("src/main/java")
    from(src)
    into(buildDir)
}


//打包成zip
//Archiving a directory as a ZIP
task packageToZip(type: Zip) dependsOn(build) {
    archiveFileName = "my-distribution.zip"
    destinationDirectory = file("$buildDir/zip")

    from "$buildDir/tmp/kotlin-classes/debug"
}

// 注意：into 和 destinationDirectory 的区别：
// destinationDirectory 是最终生成的zip文件的目录
// into 是指将源目标合并到指定的文件名中，即源目标外面会多一层目录
task packageToZip2(type: Zip) dependsOn(build) {
    archiveFileName = "my-distribution2.zip"
    destinationDirectory = file("$buildDir/zip")

    from "$buildDir/tmp/kotlin-classes/debug"
    into "classes"
}

// 解压zip
task unpackFiles(type: Copy) {
    from zipTree("libs/test.jar")
    into "$buildDir/jar"
}


//打jar包
String sdkName = "sdk"
String sdkVersion = "1.0"
String sdkAppendix = "release"
String sdkDir = "$buildDir/sdk"

task deleteJar(type: Delete) {
    delete sdkDir + "$PATH_SEPARATOR" + sdkName
}

//jar的名字结构：
// [archiveBaseName]-[archiveAppendix]-[archiveVersion]-[archiveClassifier].[archiveExtension]
task makeJar(type: Jar) {
//    dependsOn build

//    archiveFileName = sdkName   // 设置的是文件名+后缀名
    setArchivesBaseName sdkName   // 设置的是文件名，后缀名.jar会自动加上
    archiveAppendix = sdkAppendix  // 前缀
    archiveVersion = sdkVersion   // 版本号

//    destinationDir file(sdkDir)
    destinationDirectory = file(sdkDir)

    from("src/main/java")    // 源代码
//    from(zipTree("libs/test.jar"))   //第三方的jar包

    // 生成的classes,包含源代码和lib库中的文件
    // from(zipTree("$buildDir/intermediates/aar_main_jar/release/classes.jar"))

}

// UberJar (FatJar)
//注意：compile 只能打包 dependencies 代码块中使用 compile 的库，但是compile又报过时
//目前已有的解决方法，但是未能找到特别优雅的方案
// (目前通过自定义configurations 的方式解决 2020/12/25)
// https://stackoverflow.com/questions/47910578/not-able-to-copy-configurations-dependencies-after-upgrading-gradle-plugin-for-a
task makeUberJar(type: Jar) {

//    archiveFileName = sdkName       // 设置的是文件名+后缀名,即最终生成的文件名
    setArchivesBaseName sdkName   // 设置的是文件名，后缀名.jar会自动加上
    archiveAppendix = sdkAppendix  // 前缀
    archiveVersion = sdkVersion   // 版本号
    archiveClassifier = 'uber'

    destinationDirectory = file(sdkDir)
    //    destinationDir file(sdkDir)

    from("src/main/java")    // 源代码
//    from(zipTree("libs/test.jar"))   //第三方的jar包

    // 生成的classes,包含源代码和lib库中的文件
//    from(zipTree("$buildDir/intermediates/aar_main_jar/release/classes.jar"))


//    // 解决方法1；使用自定义的configuration
//    from {
//        configurations.uberConfigurations.collect {
//            println("${it.name}")
//            it.isDirectory() ? it : zipTree(it)
//        }
//
//    }


    //已过期
//    from {
//        configurations.compile.collect {
//            println("${it.name}")
//            it.isDirectory() ? it : zipTree(it)
//        }
//    }
}


task copyTaskWithPatterns(type: Copy) {
    from 'src/main/webapp'
    into "$buildDir/explodedWar"
    include '**/*.html'
    include '**/*.jsp'
    exclude { FileTreeElement details ->
        details.file.name.endsWith('.html') &&
                details.file.text.contains('DRAFT')
    }
}